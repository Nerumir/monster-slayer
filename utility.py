import random
import numpy
import mob

class Util:

    SCALE = [int(10*(1.1**i)) for i in range(100)]

    RULES = """\nC'est un jeu dans lequel on évolue de combat en combat dans le but d'atteindre le niveau 99.\n\nAvant chaque combat, nous pouvons utiliser des potions pour récupérer 10% de la durabilité max de notre armure.\n\nIl est aussi possible d'acheter des potions. Attention, le nombre de potion dans votre inventaire revient à 0 avant chaque combat.\n\nVous aurez le choix d'affronter un des trois monstres proposés. Leur niveau est proche du votre et à leur mort, nous avons la possibilité de prendre leur équipement.\n\nLe but est de monter en niveau en tuant des monstres jusqu'au niveau 99. Mourir entraîne la défaite et la fin du jeu.\n\n"""

    RULES_BANNER = """ ██▀███   █    ██  ██▓    ▓█████   ██████ 
▓██ ▒ ██▒ ██  ▓██▒▓██▒    ▓█   ▀ ▒██    ▒ 
▓██ ░▄█ ▒▓██  ▒██░▒██░    ▒███   ░ ▓██▄   
▒██▀▀█▄  ▓▓█  ░██░▒██░    ▒▓█  ▄   ▒   ██▒
░██▓ ▒██▒▒▒█████▓ ░██████▒░▒████▒▒██████▒▒
░ ▒▓ ░▒▓░░▒▓▒ ▒ ▒ ░ ▒░▓  ░░░ ▒░ ░▒ ▒▓▒ ▒ ░
  ░▒ ░ ▒░░░▒░ ░ ░ ░ ░ ▒  ░ ░ ░  ░░ ░▒  ░ ░
  ░░   ░  ░░░ ░ ░   ░ ░      ░   ░  ░  ░  
   ░        ░         ░  ░   ░  ░      ░  
                                          """

    BANNER = """ ███▄ ▄███▓ ▒█████   ███▄    █   ██████ ▄▄▄█████▓▓█████  ██▀███  
▓██▒▀█▀ ██▒▒██▒  ██▒ ██ ▀█   █ ▒██    ▒ ▓  ██▒ ▓▒▓█   ▀ ▓██ ▒ ██▒
▓██    ▓██░▒██░  ██▒▓██  ▀█ ██▒░ ▓██▄   ▒ ▓██░ ▒░▒███   ▓██ ░▄█ ▒
▒██    ▒██ ▒██   ██░▓██▒  ▐▌██▒  ▒   ██▒░ ▓██▓ ░ ▒▓█  ▄ ▒██▀▀█▄  
▒██▒   ░██▒░ ████▓▒░▒██░   ▓██░▒██████▒▒  ▒██▒ ░ ░▒████▒░██▓ ▒██▒
░ ▒░   ░  ░░ ▒░▒░▒░ ░ ▒░   ▒ ▒ ▒ ▒▓▒ ▒ ░  ▒ ░░   ░░ ▒░ ░░ ▒▓ ░▒▓░
░  ░      ░  ░ ▒ ▒░ ░ ░░   ░ ▒░░ ░▒  ░ ░    ░     ░ ░  ░  ░▒ ░ ▒░
░      ░   ░ ░ ░ ▒     ░   ░ ░ ░  ░  ░    ░         ░     ░░   ░ 
       ░       ░ ░           ░       ░              ░  ░   ░     
                                                                 
  ██████  ██▓     ▄▄▄      ▓██   ██▓▓█████  ██▀███               
▒██    ▒ ▓██▒    ▒████▄     ▒██  ██▒▓█   ▀ ▓██ ▒ ██▒             
░ ▓██▄   ▒██░    ▒██  ▀█▄    ▒██ ██░▒███   ▓██ ░▄█ ▒             
  ▒   ██▒▒██░    ░██▄▄▄▄██   ░ ▐██▓░▒▓█  ▄ ▒██▀▀█▄               
▒██████▒▒░██████▒ ▓█   ▓██▒  ░ ██▒▓░░▒████▒░██▓ ▒██▒             
▒ ▒▓▒ ▒ ░░ ▒░▓  ░ ▒▒   ▓▒█░   ██▒▒▒ ░░ ▒░ ░░ ▒▓ ░▒▓░             
░ ░▒  ░ ░░ ░ ▒  ░  ▒   ▒▒ ░ ▓██ ░▒░  ░ ░  ░  ░▒ ░ ▒░             
░  ░  ░    ░ ░     ░   ▒    ▒ ▒ ░░     ░     ░░   ░              
      ░      ░  ░      ░  ░ ░ ░        ░  ░   ░                  
                            ░ ░                                  """
    
    BANNER_LOBBY = """ ██▓     ▒█████   ▄▄▄▄    ▄▄▄▄   ▓██   ██▓
▓██▒    ▒██▒  ██▒▓█████▄ ▓█████▄  ▒██  ██▒
▒██░    ▒██░  ██▒▒██▒ ▄██▒██▒ ▄██  ▒██ ██░
▒██░    ▒██   ██░▒██░█▀  ▒██░█▀    ░ ▐██▓░
░██████▒░ ████▓▒░░▓█  ▀█▓░▓█  ▀█▓  ░ ██▒▓░
░ ▒░▓  ░░ ▒░▒░▒░ ░▒▓███▀▒░▒▓███▀▒   ██▒▒▒ 
░ ░ ▒  ░  ░ ▒ ▒░ ▒░▒   ░ ▒░▒   ░  ▓██ ░▒░ 
  ░ ░   ░ ░ ░ ▒   ░    ░  ░    ░  ▒ ▒ ░░  
    ░  ░    ░ ░   ░       ░       ░ ░     
                       ░       ░  ░ ░     """
    
    BANNER_MOBS = """ ███▄ ▄███▓ ▒█████   ▄▄▄▄     ██████ 
▓██▒▀█▀ ██▒▒██▒  ██▒▓█████▄ ▒██    ▒ 
▓██    ▓██░▒██░  ██▒▒██▒ ▄██░ ▓██▄   
▒██    ▒██ ▒██   ██░▒██░█▀    ▒   ██▒
▒██▒   ░██▒░ ████▓▒░░▓█  ▀█▓▒██████▒▒
░ ▒░   ░  ░░ ▒░▒░▒░ ░▒▓███▀▒▒ ▒▓▒ ▒ ░
░  ░      ░  ░ ▒ ▒░ ▒░▒   ░ ░ ░▒  ░ ░
░      ░   ░ ░ ░ ▒   ░    ░ ░  ░  ░  
       ░       ░ ░   ░            ░  
                          ░          """
    
    BANNER_LOOTING = """ ██▓     ▒█████   ▒█████  ▄▄▄█████▓ ██▓ ███▄    █   ▄████ 
▓██▒    ▒██▒  ██▒▒██▒  ██▒▓  ██▒ ▓▒▓██▒ ██ ▀█   █  ██▒ ▀█▒
▒██░    ▒██░  ██▒▒██░  ██▒▒ ▓██░ ▒░▒██▒▓██  ▀█ ██▒▒██░▄▄▄░
▒██░    ▒██   ██░▒██   ██░░ ▓██▓ ░ ░██░▓██▒  ▐▌██▒░▓█  ██▓
░██████▒░ ████▓▒░░ ████▓▒░  ▒██▒ ░ ░██░▒██░   ▓██░░▒▓███▀▒
░ ▒░▓  ░░ ▒░▒░▒░ ░ ▒░▒░▒░   ▒ ░░   ░▓  ░ ▒░   ▒ ▒  ░▒   ▒ 
░ ░ ▒  ░  ░ ▒ ▒░   ░ ▒ ▒░     ░     ▒ ░░ ░░   ░ ▒░  ░   ░ 
  ░ ░   ░ ░ ░ ▒  ░ ░ ░ ▒    ░       ▒ ░   ░   ░ ░ ░ ░   ░ 
    ░  ░    ░ ░      ░ ░            ░           ░       ░ 
                                                          """

    CHEST_SKIN = """⠀⠀⠀⢠⡄⢠⣤⣤⠀⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⠀⣤⣤⡄⢠⡄⠀⠀⠀
⠀⠀⠀⢸⡇⢸⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⡇⢸⡇⠀⠀⠀
⠀⠀⠀⣿⡇⢸⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⡇⢸⣿⠀⠀⠀
⠀⠀⢀⣿⡇⢸⣿⣿⠀⣿⣿⣿⠟⠛⠛⠛⠛⠻⣿⣿⣿⠀⣿⣿⡇⢸⣿⡀⠀⠀
⠀⠀⢈⡉⢁⣀⣉⣉⣀⣉⣉⣉⠀⣴⠖⠲⣦⠀⣉⣉⣉⣀⣉⣉⣀⡈⢉⡁⠀⠀
⠀⠀⢸⡇⢸⣿⣿⣿⣿⣿⣿⣿⠀⣿⡄⢠⣿⠀⣿⣿⣿⣿⣿⣿⣿⡇⢸⡇⠀⠀
⠀⠀⢸⡇⢸⣿⣿⣿⣿⣿⣿⣿⠀⣿⣧⣼⣿⠀⣿⣿⣿⣿⣿⣿⣿⡇⢸⡇⠀⠀
⠀⠀⢸⡇⢸⣿⣿⣿⣿⣿⣿⣿⣀⣉⣉⣉⣉⣀⣿⣿⣿⣿⣿⣿⣿⡇⢸⡇⠀⠀
⠀⠀⠘⠇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⠃⠀⠀
⠀⠀⢰⣄⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁⣠⡆⠀⠀
⠀⠀⠘⠛⠃⠈⠙⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠁⠘⠛⠃⠀⠀"""

    PLAYER_SKIN = """       .-""-.         
      /-.{}  \\        
      | _\__.|        
      \\/^)^ \\/        
       \\ =  /         
  .---./`--`\.--._    
 /     `;--'`     \\   """
    
    ARMES = ["Faux", "Couteau à beurre", "Poêle", "Grosse bite"]
    ARMURES = ["Doudoune", "Gilet", "Tunique", "Peignoir"]
    # https://emojicombos.com/monster-ascii-art
    MOBS = [

        {"name" : "Lézard ailé",
            "skin" : """⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡟⠉⡙⠿⢟⣛⡷⠶⣤⣄⣀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⣱⣄⠀⠀⠈⠀⠀⠈⢉⣛⣶⣤⣀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡤⠶⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⡇⠙⢷⠀⠀⠀⠀⣴⠟⠉⠀⠈⠁
⠀⠀⠀⠀⠀⣠⡴⠾⠋⠡⠰⣴⡏⠀⠀⠀⣠⣤⣤⣶⠞⠛⠿⣿⢿⠛⠛⠳⢶⣤⣀⠀⢀⣿⠀⠃⠀⠀⠳⣄⠀⢠⡇⠀⠀⠀⠀⠀
⠀⠀⢀⡴⠛⠉⠀⠀⠀⢀⠎⠀⣷⣄⣴⡏⣀⣼⣿⣿⡇⢀⠀⠈⣇⢳⠀⠀⠀⠀⠉⠳⣾⣯⠃⠀⠀⢀⣀⡈⢳⠀⣿⡀⠀⠀⠀⠀
⢀⣴⣫⠴⠒⠒⠒⠲⣤⡀⠀⠀⢈⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⡀⡟⠘⠆⠀⠀⠀⣀⣴⡿⠃⣠⡶⠛⠋⠉⠛⠛⢷⣼⣧⠀⠀⠀⠀
⠚⠋⠀⠀⠀⠀⠀⠀⣺⡴⠛⢶⣾⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⢣⠇⠀⠀⠀⢠⢿⡏⠉⠀⡰⢿⡆⠀⠀⠀⠀⠀⠀⠘⠛⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠛⠁⠀⢸⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⢠⠟⠀⠀⠀⠀⠀⠘⠛⠉⣹⠇⠘⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠈⠉⠀⠀⠀⠀⠀⠄⣱⠏⣰⠇⠀⠀⠀⠀⠀⢠⣾⡏⠀⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢧⡀⠀⠀⠀⠂⢈⡤⢞⡡⠚⠁⠀⠀⠀⠀⠀⠀⢸⡿⠀⢰⣻⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠙⠛⠲⠶⠒⠛⠉⠒⠉⢀⣀⣀⠀⣀⠀⠀⠀⠠⠟⠁⣠⢏⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠈⣶⣤⣄⣀⣰⣿⣿⣿⣿⣮⣣⡀⠀⠀⢠⢞⠏⣼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⣾⠿⠶⡼⠇⠀⠉⠛⢿⣿⣿⣿⣿⡿⡿⠗⠀⠀⠕⠋⢰⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⠀⠀⠀⠀⣀⣀⣀⠀⠙⢿⣿⣿⣷⠀⠀⠀⠀⠀⣠⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠟⠉⠉⠉⠙⠻⣾⣿⣿⠏⠀⠀⢀⡄⠈⣹⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀⢠⣤⣤⣀⣠⣾⠟⣉⠔⠂⠀⢼⠇⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣠⡾⠃⠘⢦⡀⠈⠙⠒⠈⠁⠀⠀⠀⠉⠀⣄⢹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢠⠞⣿⠉⠀⠈⠉⠀⠀⠀⠀⠙⣦⡀⠀⠀⠀⠀⠀⠀⣀⠀⠈⢾⣷⡀⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⢱⡀⠀⠀⠀⠀⠀⠀⠀⣀⡾⠉⠢⠀⣀⠴⠒⠉⠀⡀⠀⠀⠉⠙⠛⠛⠉⠉⠀⠈⠙⠲⣄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠶⠖⠛⠉⠁⠀⠀⢀⡞⡁⠀⠀⠀⢸⣿⢳⢠⠀⠀⠀⠀⠀⣀⣀⣀⣀⠀⠈⢳⡄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠉⠀⠀⡀⠤⠀⠂⠀⠀⣼⢰⠃⠀⢀⠀⣠⡥⠶⢧⣤⠤⠴⠒⠛⠉⠁⠀⠉⠻⣦⡀⢻⡄⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡀⠀⢠⠟⣿⠛⠛⠛⠛⠛⢻⣾⠀⠀⠸⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡼⠃⣸⡇⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢷⡀⠸⠄⢿⡀⠀⠀⠀⠀⠈⢿⡀⠀⠙⠲⠿⠷⠶⠤⣄⡀⠀⠀⠀⠀⠀⠀⠀⢸⡅⣾⠋⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠢⣄⣀⠙⠦⣄⠀⠀⠀⠀⠙⠦⣤⣤⣤⣤⣤⣄⡀⠙⢦⡀⠀⠀⠀⠀⢀⣼⠗⣸⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢹⡆⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠟⠀⠀⢠⡇⠀⠀⠀⠀⠀⠙⠛⠉⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡴⠚⣋⡼⠃⠀⠀⠀⠀⠀⠀⠀⢾⣁⣀⣀⣠⡴⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"""
        },
        {"name" : "Dragon",
            "skin" : """⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⡗⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣤⡤⠤⠶⠿⣶⣦⣄⣙⣦⠙⢿⡓⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣄⠀⠀⠀⠭⣉⠓⠒⠚⠽⡄⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣋⡿⠀⠀⠀⣀⡽⠀⠀⠀⠘⢈⠳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣷⡆⢠⠖⠚⣇⠀⣙⡶⠄⠈⠰⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠁⠐⣧⣾⡄⣄⠘⣆⡈⠷⠄⣤⣶⠈⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠋⠛⣦⣘⢿⣇⣿⣿⠉⠹⣗⠦⣈⠘⣾⡿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢱⡾⠛⣏⠿⠧⡀⠈⠳⣄⡙⠊⠉⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣤⡤⣤⡴⠉⠀⠀⠈⢳⡀⠑⠦⡀⠈⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣠⣬⠷⢮⣙⣒⣤⡤⠀⠀⢹⡄⡄⢱⠀⠀⠈⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⠛⠳⣄⠀⠀⠀⠀⠠⣌⣩⠿⠀⠒⣼⡇⠇⠈⠳⡄⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣹⣤⣖⣸⣍⣿⠽⠤⠒⠚⠋⠀⠀⠀⠀⢸⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣠⠾⠛⠋⠉⠉⠀⠀⠀⠀⣠⡤⠂⠀⠀⢠⡀⢰⠋⠀⢠⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣠⠤⣶⡾⠅⠀⠀⠀⠀⠀⠀⠀⠀⠸⡏⢺⠀⠀⠀⢈⣇⠜⠃⠀⣾⡈⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢻⠇⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣼⠋⠈⠀⠀⢠⠞⠋⠀⢀⡾⠁⠉⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⣏⡼⠁⠀⠀⠀⢀⡤⠤⠔⠊⢉⣡⠼⠓⠀⠀⢀⣴⣋⣀⡠⠶⠻⣄⡀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣸⡿⠁⢠⠔⠒⠚⢋⡤⠖⠊⢩⡟⠀⠀⢀⣠⠞⠋⠉⠁⠀⠀⠀⠀⠀⠉⢹⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢼⢻⠇⡤⠇⠀⢀⣴⠋⠀⠀⠀⣼⣠⠴⠚⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⣀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠙⣿⡰⠂⠀⢠⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣿⡇⠀⠀⣏⢻⡀⢀⣠⠴⠛⠉⠓⠢⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠈⢿⣄⡀⠘⢆⡙⠋⠀⢀⡠⠔⠦⠐⠒⣚⠙⣲⡦⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠙⢧⡀⠀⠈⠉⠉⠁⣀⠀⣀⡴⠚⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠙⣶⣤⡀⠉⠘⠛⠻⣅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⠳⡌⠁⠒⢄⠀⠈⠑⢢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⠤⣄⣁⣀⣀⣀⣛⣲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀"""
        },
        {"name" : "Pigmin",
            "skin" : """⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⢀⠀⢸⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⠀⣿⣿⣷⢾⡿⠇⠙⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣀⣀⣿⠿⠿⣿⣿⡿⢿⣦⣴⣿⠻⢶⡦⢤⣀⢀⡀⠀⠀⠀⠀⠀
⠀⣰⢾⣽⣿⣝⣷⡄⠎⢻⣿⣾⢉⠻⡇⠘⠂⡀⠒⠛⢿⣉⣳⣤⠀⠀⠀
⢨⣿⣟⡏⠀⠀⢁⣳⡄⠀⠉⢠⡀⠀⠀⢈⠀⠀⠀⠀⠀⡇⠻⣿⡇⠀⠀
⠘⢿⣽⡓⠚⣿⢟⡿⠃⡀⠀⠘⢣⡀⠀⠈⠁⢀⣄⠀⢀⣿⣿⠟⠁⠀⠀
⠀⠈⠙⢶⣾⣷⠟⠁⣼⣟⣴⣷⢾⣿⣟⣿⡗⠺⢿⡷⠚⠉⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠉⠛⠿⠿⠿⣽⣶⣿⣿⣋⣁⡤⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟⣿⡿⠟⣯⡀⠀⠀⠀⣀⠀⣀⣀⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢡⣿⣷⡖⣿⣿⡿⣿⣏⣭⣭⣿⣿⠃⠀⠀
⠀⠀⠀⠀⠀⣠⣀⣤⠀⠀⣿⡀⠿⣟⣿⣽⡏⢯⠉⠁⠘⣿⡋⠁⠀⠀⠀
⠀⠀⠀⢰⣾⣻⣿⣸⡟⢧⣜⣛⢻⣿⣿⡿⠶⠚⢳⡀⠀⢙⣷⣶⣾⣯⡆
⠀⠀⠠⣾⠻⢻⠿⣟⣷⡀⠛⠿⣿⢻⣏⣥⠤⠶⠶⢧⠀⠀⠚⢻⡿⡏⠀
⠀⠀⢀⢸⣆⣾⡆⢸⢿⣯⣷⣾⣿⣾⠟⠋⠉⠀⡆⢨⡇⠀⠀⠈⠀⠀⠀
⠀⠀⠘⠛⠋⠉⠁⠈⢻⣻⣿⣯⡍⢻⣖⣒⠒⢺⠛⣽⠇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⢳⣬⣧⣤⣤⣮⠞⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠟⢁⣼⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣯⣥⣠⣾⣭⣤⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢠⡤⠶⠖⠺⡿⠟⠛⠋⠛⠛⠋⠙⠃⠀⠀⠀⠀⠀⠀⠀⠀"""
        },
        {"name" : "Glouton",
            "skin" : """⠀⠀⠀⠀⢶⡆⠀⠀⣴⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢠⣾⣿⣦⣤⣭⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣰⠏⠀⢹⣻⣭⣭⡧⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⠏⠀⠴⠚⣷⣿⣿⠀⠀⢀⡤⠖⠛⠹⠶⠤⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡏⠀⠀⠀⡼⠉⠉⠁⢀⡴⠋⠀⠀⠤⢄⡀⠀⠀⠈⢢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡇⠀⠀⠀⢧⡀⠀⢠⠎⠀⢠⣤⡞⠒⠲⡌⠃⠀⠀⠀⠱⢤⡀⠀⢀⣀⣀⣀⠀⠀
⠀⣧⠀⠀⠀⠀⠙⠲⠏⠀⢀⡀⠙⣇⠀⠀⢘⡶⠆⣤⠤⠔⢲⣯⡖⠉⠀⠀⠈⢧⠀
⠀⢺⣦⡀⠀⠂⠀⠀⠀⠀⠀⢠⣄⠼⣗⠒⠋⠀⠀⠹⣄⣠⣿⡋⡀⢠⣤⡆⠀⢸⠀
⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠈⠦⣠⠴⣄⢀⣠⣄⣸⠇⠀⣳⣿⣧⠈⢹⠁
⠀⠀⠀⠘⠶⡆⠀⠆⢶⣴⠀⢾⠀⠀⠀⠀⠀⠀⠈⠉⡼⡭⣭⡴⠖⠼⠛⣿⣿⠏⠀
⠀⠀⠀⠀⠀⢻⠀⠀⠀⠁⠀⠘⡄⠀⣠⢤⣀⡤⡄⢸⣿⣿⠋⠀⠀⠀⠀⠙⠁⠀⠀
⠀⠀⠀⠀⠀⣏⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠘⠛⢱⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣸⠁⠀⠀⠸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⠃⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠹⡆⠀⠀⠀⣷⣄⢠⡀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⠃⠀⡄⠀⠀⠺⠾⠃⠀⠀⠀⠀⠾⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣀⣀⡴⠋⠀⠛⠁⠀⠀⠀⠀⠀⠀⢀⡄⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠃⠀⢀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢸⠁⠀⠀⠀⠀⣤⡄⠀⠀⠀⡴⠛⠲⡄⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⡇⠀⠀⠀⣀⠀⠘⠀⠀⣠⠞⠁⠀⠀⢣⠀⠀⠀⠀⠠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠘⠒⠒⠶⠁⠉⠉⠉⠉⠁⠀⠀⠀⠀⡞⠀⠀⠰⠇⠐⠛⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣼⠁⠀⠀⠀⠀⠀⠀⠈⢳⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠷⠤⠤⠤⠤⠿⠉⠁⠀⠀⠀⠀⠀⠀⠀"""
        },
        {"name" : "Petit diable",
            "skin" : """⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⢯⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣲⣄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡤⠼⡄⠀⠀⠀⠀⠀⠀⠀⠀⡠⠒⠉⠉⠢⡀⠀⠀⠀⠀⠀⢸⠧⠼⡆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⠀⡤⠚⢓⡦⠤⣤⠔⡦⠖⠻⠁⠀⠸⠆⠀⡷⣤⠤⣀⣀⢴⡛⠒⢤⣹⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢟⠀⣠⠊⠀⡰⣡⠊⠀⢀⡠⠷⠄⣀⣠⠔⠳⡈⠳⡈⢦⠀⠘⢄⢠⠏⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡟⢩⣍⢺⣷⠃⠀⢰⢃⠤⠤⢤⣀⠞⠉⠳⣄⠀⢱⡈⣦⠖⢾⡃⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⠖⠒⠢⢵⣮⣝⣻⠇⠀⢀⡼⠁⠀⠀⢰⣿⣷⡄⠀⠘⡄⠀⣿⣔⣩⢯⠷⠊⠉⠙⢦⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⢠⠤⠬⣑⣾⠀⠀⠘⣿⣄⠀⠀⢈⣿⡟⠀⠀⣠⡇⠀⢸⠗⣛⠡⠄⠐⢧⠀⠈⢆⠀⠀
⠀⠀⠀⠀⠀⠀⢀⡎⠀⠀⠀⣠⠃⠀⠀⠀⢹⠀⠀⠀⠈⠙⠛⠋⠁⠀⠘⢳⣿⠛⠀⠀⢸⠉⠀⠀⠀⠀⢸⡀⠀⠸⡄⠀
⠀⠀⠀⠀⠀⣴⡿⠀⠀⠀⢰⣇⡀⠀⠀⠀⢸⡀⠀⠀⠀⣠⠴⡞⠉⠉⣏⢉⠏⣆⠀⠀⡜⠀⠀⠀⣀⠤⢼⠃⠀⢀⣷⠀
⠀⠀⠀⠀⠐⡇⢀⠀⠀⠀⢈⠀⣹⠀⠀⠀⠀⣇⠀⣠⢾⡄⢰⠛⡄⢸⠹⡜⠀⢸⡄⢀⠇⠀⠀⠀⣇⠀⡄⠀⠀⠘⠛⡄
⢀⣀⣀⣠⣤⣼⣿⣄⡆⠀⣿⡏⠁⠀⠀⠀⠀⡏⠸⣹⡾⠽⠷⠤⠼⠧⠴⠧⢤⠼⠿⣾⠀⠀⠀⠀⢹⡾⠇⠀⠀⠀⢰⠃
⠘⣿⣝⠛⠛⣛⣿⣿⠭⣙⠉⠀⠀⠀⠀⠀⢀⣽⠋⢡⠛⠉⠉⠒⠒⠒⠛⠒⢦⠉⠒⠇⠀⠀⠀⠀⠈⠓⠒⠛⠒⠛⠋⠀
⠀⠈⠙⠥⣀⣠⣞⠟⢀⡼⠃⠀⠀⣠⠔⠊⠁⣸⠆⡆⠀⠀⠀⠈⠙⠒⠠⠀⢀⡇⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣠⠊⢁⡔⠋⢀⡤⠒⠉⣀⣤⡴⠚⠁⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⠃⠈⠒⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢻⡀⠘⠓⠚⣁⡤⠔⣋⡵⠋⠀⣀⠴⠊⠉⠑⠒⠒⠒⠒⠒⠒⠒⠋⠉⠲⢄⡀⠑⠢⢀⣀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠱⠶⠶⠭⠕⠻⡏⠀⠀⠀⣞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠟⠂⠀⠀⢨⠆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⡗⠀⠀⢺⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠏⠀⠀⠀⢸⠋⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡆⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡞⠀⠀⠀⣰⠃⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⡤⡤⢤⡤⢼⠃⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠀⠀⢀⠤⣧⠤⢴⣤⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢸⣧⠃⡏⠀⠀⠁⠀⠀⠀⢈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠉⠀⣀⠁⠀⠈⡆⠀⣹⣷⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠉⠓⠛⠒⠒⠊⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀"""
        },
        {"name" : "Démon à seins",
            "skin" : """⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠤⠤⠲⣖⠒⠤⠤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣠⠶⠋⠁⠀⠀⠀⠀⢻⣷⣦⣀⣀⣬⣽⣷⣶⣶⣶⣤⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣴⣴⠟⠁⠀⢠⠀⠀⡆⠀⠀⢀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀
⠀⠀⠀⢰⣿⡇⠀⠀⠀⣼⠀⢢⠸⡄⠀⠘⢆⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀
⠀⣀⣠⣾⣿⣿⡀⠀⢰⠇⡇⠘⡄⢹⣄⠀⠈⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀
⣾⣿⣿⣿⣿⣿⣧⡀⢸⠀⢹⡀⢻⡄⢻⡳⣄⠀⢹⣾⡉⠉⢯⡙⠛⠛⠻⡿⠀⠀⠀⠀⠀
⣿⣿⣿⣿⣿⣿⠿⡇⡎⠀⠀⣳⠞⣟⢦⠻⡛⠛⢧⣘⣿⡦⣄⡱⣄⠀⠀⠹⡄⠀⠀⠀⠀
⠻⢿⣿⣿⣿⠁⢸⣧⠏⠉⣉⣩⣧⡘⡄⢷⠟⣿⠉⣿⣿⣿⣆⠉⡟⠓⠀⠀⠹⡄⠀⠀⠀
⠀⠀⠉⠋⠸⡀⠈⣿⡿⣿⢹⣿⣿⠳⣽⡈⢧⡙⢠⣿⣿⡟⡇⠀⣇⠈⡇⠀⢦⡹⡄⠀⠀
⠀⠀⠀⢰⠀⢷⠀⣿⢷⣉⣸⣿⠃⠀⠈⠻⡄⠙⠛⠛⣉⡇⡇⠀⢹⠀⠸⡄⠸⡍⠻⠦⠀
⠀⠀⠀⢸⢠⠈⢇⢻⡆⠉⣉⡀⠀⠀⠀⠀⠀⠀⢀⣈⠛⣷⡇⠀⢸⣧⡀⠹⣷⢽⣦⡀⠀
⠀⠀⠀⡸⣼⠀⣾⣿⣿⡀⠛⠃⠀⠀⠀⣀⣤⡶⠿⢿⠀⣿⢷⠀⢸⡜⡿⠷⡾⠗⠀⠀⠀
⠀⠀⢀⡿⢃⣠⣿⡏⢿⣷⣄⡀⠀⠀⠻⢿⣿⡤⠶⠋⢀⣿⣾⠀⢸⣿⡟⠂⠀⠀⠀⠀⠀
⠀⠀⠾⠁⢈⡿⢻⢹⡸⣷⣸⢿⣷⣶⣤⣤⣄⣀⣠⣴⡿⠋⢻⡇⢸⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠘⠁⠺⠋⢧⠹⣯⠀⠻⠃⠙⠏⢹⡟⠛⠋⠀⠀⠈⠇⢸⡤⠖⠊⠉⠉⡽⠳⡄
⠀⠀⠀⠀⠀⠀⣴⡖⠚⢧⣿⡏⠉⠉⢿⣿⣯⣁⠀⠀⠀⠀⢀⣼⢸⠁⠀⠀⠀⡴⠀⠀⢳
⠀⠀⠀⠀⠀⠀⣿⠀⠀⠈⢻⡄⠀⠀⠀⠈⠙⠻⠿⠷⠶⠾⠿⠛⠋⠀⠀⠀⡜⠁⠀⠀⠼
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"""
        },
        {"name" : "Cyclope",
            "skin" : """⠀⠀⠀⠀⠀⢀⣀⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀
⠀⢀⣠⣄⣸⠿⣤⠙⢧⣉⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⡞⢉⣿⣼⡇⠀
⠀⠘⠛⢲⠈⣇⣜⢀⣮⠝⠀⡟⠀⠀⠀⠀⢀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡏⢥⣿⠿⣇⡸⠿⣅⡀
⠀⠀⣠⢏⣉⣁⡨⠯⢕⣠⠞⠁⠀⠀⣠⠞⠋⠉⠀⠈⠉⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⣀⣧⣴⡷⠘⠿⢤⣾⣿⠗
⠀⢸⠁⠀⢀⠤⢽⣮⢉⠉⡆⠀⠀⡼⠁⠀⠀⣠⣤⣄⠀⠀⠀⠹⡄⠀⠀⠀⠀⢰⠎⢀⣩⣽⣧⡤⠄⠘⢆⠀⠀
⢠⣿⠓⠢⣅⠀⠀⠙⢀⡼⠀⠀⣠⡇⠀⠀⠀⠻⠿⠟⠀⠀⠀⠀⡗⠢⣄⠀⠀⠘⣆⠀⠋⠁⠈⠇⣀⣀⣸⡀⠀
⣸⡛⣇⠀⠈⠙⣻⠋⠁⠀⢠⠞⠁⠹⣄⠀⠀⠀⠀⠀⠀⠀⢀⡼⠃⠀⠀⠳⡄⠀⠈⠓⢤⡤⠤⠒⠁⢉⣷⡇⠀
⣿⠇⠀⠀⠀⠀⣧⡆⠀⢀⣏⣀⠀⠀⠙⠳⣤⣄⣀⣀⣤⠴⠛⠁⠀⠀⠀⠤⣵⠀⠀⠀⣼⠇⠀⠀⠀⠘⣹⡅⠀
⢱⠀⠀⠀⠀⠀⠹⢷⣆⡾⠋⣠⣤⣤⣀⠀⠀⠒⠙⠓⠒⠂⠀⢀⣤⣶⣶⣄⠈⢧⢀⣶⠟⠀⠀⠀⠀⠰⠛⡇⠀
⠘⣇⠀⠀⠀⠀⠀⠘⢻⡇⠀⢿⣿⣿⣬⣷⣦⣄⣀⠀⣀⣠⣴⣯⣼⡟⣻⠏⠀⢸⠟⠃⠀⠀⠀⠀⠀⠀⣰⠃⠀
⠀⠘⢆⠀⠀⠀⠀⠀⠘⣇⠀⠀⠛⢿⣛⣿⣧⣀⣿⣿⣿⠿⣏⣹⠿⠛⠁⠀⠀⡼⠀⠀⠀⠀⠀⠀⢀⣴⠃⠀⠀
⠀⠀⠘⢷⠄⠀⠀⠀⠀⠹⣷⡀⠀⠀⠀⠉⠙⠛⠛⠛⠛⠉⠉⠀⠀⠀⡀⢀⡴⠁⠀⠀⠀⠀⠀⢀⡼⠃⠀⠀⠀
⠀⠀⠀⠀⣷⠄⠀⠀⠀⠀⠙⣿⢤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⢾⡡⠋⠀⠀⠀⠀⠀⠀⣠⠟⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠈⠢⡀⠀⠀⠀⠀⠀⠀⠙⠲⣦⣄⡀⣀⠀⢀⣤⣤⣞⠁⠚⠀⠀⠀⡀⠀⠀⣴⠊⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⠢⡀⠀⠀⣄⠀⠀⠀⠀⠉⠉⠙⠲⠻⠛⡽⠁⠀⠀⠀⠀⡼⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠘⣿⢄⡠⣄⠀⠀⠀⠀⠀⠘⠀⢀⠀⣀⣴⡟⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠒⠀⠈⠃⠙⠏⠓⢤⡀⠀⣄⣀⡴⡿⠞⠋⠋⠀⠀⠀⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠙⢾⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠉⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣤⡀⠀⠀⡟⠳⠤⢀⣀⣀⣀⣀⣀⠤⠤⠒⢦⠀⠀⠀⢠⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡠⠖⠒⠒⢄⡘⠳⡄⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⡞⠀⣀⢴⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢠⣾⠒⠒⠒⣒⡲⣿⣶⣼⢲⡬⢧⡀⠀⠀⠀⠀⠀⠀⢰⣿⠽⢶⠊⢉⡝⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠘⢿⣦⡶⠟⢻⡓⢢⡙⣷⣷⣄⡈⢧⠀⠀⠀⠀⠀⠀⠈⠻⣽⡏⣯⡭⠗⠒⠒⠦⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⠙⠷⠬⢤⣌⣉⣉⣠⣼⠟⠛⣿⡆⠀⠀⠀⠀⠀⠀⠀⢸⡘⠾⠤⢀⣀⣀⣀⣼⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠓⠤⠤⠞⠃⠀⠀⠀⠀⠀⠀⠀⠀⠑⠒⠠⠤⠤⠖⠚⠁⠀⠀⠀⠀⠀⠀⠀"""
        },
        {"name" : "Bunny Darko",
            "skin" : """⠀⠀⠀⣀⣀⣄⣀⣤⡤⠶⠶⣤⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⠞⠋⠁⠀⠀⠀⠀⠀⠀⢀⣽⣏⡉⠛⢷⡄⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣄⣀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣼⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⠀⢸⣟⠀⠀⠀⠀⠀⠀⢰⡿⠁⢀⣬⣹⡛⠉⠙⠛⠷⣤⡀⠀⠀⠀⠀
⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣻⣿⡿⠀⠸⣧⠀⠀⠀⠀⠀⢀⣿⠃⠀⣾⣿⣿⣿⡆⠀⠀⠀⠀⠉⠛⢶⣄⠀
⠀⢻⠀⠀⠀⠀⠀⠀⢀⣸⣿⢿⡿⣿⠇⠀⢈⣿⠀⠀⠀⠀⠀⣸⠇⠀⢸⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠘⡇
⠀⠘⣧⠀⠀⠀⠀⠀⣼⡯⠝⠍⢲⡟⠀⠀⣸⡏⠀⠀⠀⠀⠀⣿⠀⠀⢸⡿⣾⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇
⠀⠀⢹⡀⠀⠀⣠⡾⠇⢳⡀⠀⣿⠁⠀⠀⣿⡀⠀⠀⠀⠀⣸⡿⠀⠀⢸⡟⡋⠋⣹⡆⠀⠀⠀⠀⠀⠀⢀⡿⠀
⠀⠀⣼⡤⠖⠛⣿⡧⠀⠀⠑⣄⠇⠀⠀⠀⠸⣿⠄⠀⢠⣾⠏⠀⠀⠀⢸⠇⠀⣠⠟⣷⠀⠀⠀⠀⠀⢠⡞⠀⠀
⠀⠀⠀⠀⠀⠀⠙⣧⠀⠀⠀⠈⢶⡆⠀⠀⠀⢿⣤⣦⣾⠃⠀⠀⠀⣠⢃⡤⠚⠁⠀⠻⣦⡀⠀⠀⣴⠋⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠹⡆⠀⠀⠀⠀⠀⣀⣀⣄⣀⣙⣇⡀⠀⠀⠀⠐⠛⠁⠀⠀⠀⢠⣾⠉⠻⣆⢸⠃⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣟⣠⣤⡶⠞⠋⠉⠉⠈⣿⣇⠀⠀⠑⠂⠀⠐⠠⣄⠀⠀⣴⡟⠁⠀⠀⠈⠛⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⣿⠛⠉⠁⠀⡀⠀⠀⠀⠀⠈⠉⠉⠲⣤⡀⠀⠠⣄⠈⠢⣞⡁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣼⡟⠋⠉⠀⠀⣰⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠳⡄⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⣼⠟⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⢸⡀⠀⠘⣾⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣿⣷⣠⠄⠀⠀⢀⣼⣧⠀⠀⠀⠀⠀⠀⣠⠆⠀⠀⠀⠀⢸⠇⠀⠀⢹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢶⡿⣿⡟⣠⣴⣾⣿⣿⣿⣦⣀⠀⠀⠀⡌⠁⠀⠀⠀⠀⢀⣿⠀⠀⡇⠈⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢾⡇⣿⠻⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⡰⠁⢀⣤⣶⣿⣷⣾⣿⡄⠀⢿⡄⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣧⡇⠀⣿⣿⣿⣿⣿⣿⣿⡿⠁⣸⢡⠀⣼⣿⣿⣿⣿⣿⣿⣿⣄⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢀⣴⡿⠟⠁⠘⠿⢿⣿⣿⣿⠿⠋⠀⢀⡟⢸⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣾⣡⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢼⠁⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⣀⣴⣾⣧⣿⡀⠀⠘⣿⣿⣿⣿⣿⣿⣿⠈⣿⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠘⣿⣦⠀⠀⠀⠀⠀⠁⠀⠀⠀⠈⠻⡇⠉⢿⣷⡄⠀⠈⠁⠘⡿⠛⠿⠇⠘⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠘⢿⣿⣶⣶⣶⣶⣦⢙⡇⠀⠀⠀⠀⠀⠈⠉⠀⠀⠀⠀⢸⠁⠀⠀⠀⠀⠈⠻⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠁⠀⠀⠛⣿⣿⡈⠀⢀⠀⠀⠀⠀⠀⠀⢸⠋⢑⣶⣦⣄⡀⠀⠀⣀⣤⡶⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣾⣟⠙⡟⡶⢺⡞⢻⣄⣠⣤⡄⠀⢀⣿⡿⠏⠉⠛⠻⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠙⣿⣾⣶⣧⣼⣄⣼⣁⢸⡇⣹⣶⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠈⠙⠋⠛⠛⠻⡿⠛⠻⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"""
        },
    ]

    # Gives level of exp
    @staticmethod
    def levelOf(cls, exp: int):
        somme = 0
        res = 1
        for value in cls.SCALE:
            somme += value
            if(exp < somme):
                return res
            res += 1
    
    @staticmethod
    def more_or_less(value: int) -> int:
        return int(random.uniform(value*0.8, value*1.2))
    
    # Donne le montant d'xp correspondant au niveau indiqué
    @staticmethod
    def baseLevel(cls, lvl: int) -> int:
        res = 0
        for i in range(len(cls.SCALE)):
            if(i < lvl-1):
                res += cls.SCALE[i]
        return res+1
    
    @staticmethod
    def setDamage(cls, lvl: int) -> int:
        return cls.more_or_less(cls.SCALE[max(0, min(lvl-1, 99))])
    
    @staticmethod
    def setDurabilite(cls, lvl: int) -> int:
        return cls.more_or_less(cls.SCALE[max(0, min(lvl-1, 99))]*5)
    
    @staticmethod
    def setCC(cls, lvl: int) -> (int, int):
        scale_chance = [i for i in numpy.linspace(15, 40, 100)]
        scale_force = [i for i in numpy.linspace(30, 90, 100)]
        chance = cls.more_or_less(scale_chance[max(0, min(lvl-1, 99))])
        force = cls.more_or_less(scale_force[max(0, min(lvl-1, 99))])
        return (chance, force)
    
    @staticmethod
    def setResistance(cls, lvl: int) -> int:
        scale_resistance = [i for i in numpy.linspace(15, 45, 100)]
        resistance = cls.more_or_less(scale_resistance[max(0, min(lvl-1, 99))])
        return resistance
    
    @staticmethod
    def completeSpaces(length: int, string: str) -> str:
        if(len(string) >= length):
            return string
        else:
            while len(string) != length:
                string += " "
            return string
    
    @staticmethod
    def displayMobChoice(cls, mobs: list[mob.Mob]) -> str:
        res_lines = ["\n"]
        line = []
        for mob in mobs:
            len_second_line = len(f"🍸 Potions  >> {mob.potion.quantity} | 💰 Or >> {mob.money}")
            incr_name = int((len_second_line-len(f"{mob.name} (Lv. {mob.getLevel()})"))/2)+1
            line.append(cls.completeSpaces(len_second_line+2, " "*incr_name+f"{mob.name} (Lv. {mob.getLevel()})"+" "*incr_name))
        res_lines.append("    |    ".join(line))
        line = []
        for mob in mobs:
            line.append(f"🍸 Potions  >> {mob.potion.quantity} | 💰 Or >> {mob.money}")
        res_lines.append("    |    ".join(line))
        res_lines.append("\n")
        res_lines.append("\n")
        return "\n".join(res_lines)